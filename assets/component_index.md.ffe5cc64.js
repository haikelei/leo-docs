import{_ as a,c as e,o as n,N as l,x as t,a as s}from"./chunks/framework.fc67cb9d.js";const m=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"component/index.md","lastUpdated":1685603474000}'),o={name:"component/index.md"},p=l(`<h3 id="组件使用的入门教程" tabindex="-1">组件使用的入门教程 <a class="header-anchor" href="#组件使用的入门教程" aria-label="Permalink to &quot;组件使用的入门教程&quot;">​</a></h3><ul><li>组件是视图层的基本组成单元。</li><li>组件是一个单独且可复用的功能模块的封装。</li></ul><p>每个组件，包括如下几个部分：以组件名称为标记的开始标签和结束标签、组件内容、组件属性、组件属性值。</p><ul><li>组件名称由尖括号包裹，称为标签，它有开始标签和结束标签。结束标签的<code>&lt;</code>后面用<code>/</code>来表示结束。结束标签也称为闭合标签。如下面示例的<code>&lt;component-name&gt;</code>是开始标签，<code>&lt;/component-name&gt;</code>是结束标签。</li><li>在开始标签和结束标签之间，称为组件内容。如下面示例的<code>content</code></li><li>开始标签上可以写属性，属性可以有多个，多个属性之间用空格分割。如下面示例的<code>property1</code>和<code>property2</code>。注意闭合标签上不能写属性。</li><li>每个属性通过<code>=</code>赋值。如下面的示例中，属性<code>property1</code>的值被设为字符串<code>value</code>。</li></ul><blockquote><p>注意：所有组件与属性名都是小写，单词之间以连字符<code>-</code>连接。</p></blockquote><div class="language-html"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">component-name</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">property1</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">value</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">property2</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">value</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">	content</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">component-name</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span></code></pre></div><p>下面是一个基本组件的实例，在一个vue页面的根<code>&lt;view&gt;</code>组件下插入一个<code>&lt;button&gt;</code>组件。给这个组件的内容区写上文字“按钮”，同时给这个组件设置了一个属性“size”，并且“size”属性的值设为了“mini”。</p><blockquote><p>注：按照<a href="https://cn.vuejs.org/v2/guide/single-file-components.html" target="_blank" rel="noreferrer">vue单文件组件规范</a>，每个vue文件的根节点必须为 <code>&lt;template&gt;</code>，且这个 <code>&lt;template&gt;</code> 下只能且必须有一个根 <code>&lt;view&gt;</code> 组件。</p></blockquote><div class="language-html"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">template</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">view</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">		</span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">button</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">size</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">mini</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;">按钮</span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">button</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">view</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">template</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span></code></pre></div><p>通过了解<a href="/leo-docs/component/button.html">button组件</a>的文档，我们知道上述代码将在页面中绘制一个按钮，按钮显示的文字是“按钮”，按钮的大小是小尺寸的。</p><h4 id="组件的属性类型" tabindex="-1">组件的属性类型 <a class="header-anchor" href="#组件的属性类型" aria-label="Permalink to &quot;组件的属性类型&quot;">​</a></h4><p>组件的属性，有多种类型：</p>`,12),c=t("table",null,[t("thead",null,[t("tr",null,[t("th",{style:{"text-align":"left"}},"类型"),t("th",{style:{"text-align":"left"}},"描述"),t("th",{style:{"text-align":"left"}},"注解")])]),t("tbody",null,[t("tr",null,[t("td",{style:{"text-align":"left"}},"Boolean"),t("td",{style:{"text-align":"left"}},"布尔值"),t("td",{style:{"text-align":"left"}},[s("组件写上该属性，不管该属性等于什么，其值都为 "),t("code",null,"true"),s("，只有组件上没有写该属性时，属性值才为 "),t("code",null,"false"),s("。如果属性值为变量，变量的值会被转换为 "),t("code",null,"Boolean"),s(" 类型。")])]),t("tr",null,[t("td",{style:{"text-align":"left"}},"Number"),t("td",{style:{"text-align":"left"}},"数字"),t("td",{style:{"text-align":"left"}},"1, 2.5")]),t("tr",null,[t("td",{style:{"text-align":"left"}},"String"),t("td",{style:{"text-align":"left"}},"字符串"),t("td",{style:{"text-align":"left"}},'"string"')]),t("tr",null,[t("td",{style:{"text-align":"left"}},"Array"),t("td",{style:{"text-align":"left"}},"数组"),t("td",{style:{"text-align":"left"}},'[ 1, "string" ]')]),t("tr",{"key:":"",value:""},[t("td",{style:{"text-align":"left"}},"Object"),t("td",{style:{"text-align":"left"}},"对象"),t("td",{style:{"text-align":"left"}})]),t("tr",null,[t("td",{style:{"text-align":"left"}},"EventHandler"),t("td",{style:{"text-align":"left"}},"事件处理函数名"),t("td",{style:{"text-align":"left"}},[t("code",null,"handlerName"),s(" 是 methods 中定义的事件处理函数名")])]),t("tr",null,[t("td",{style:{"text-align":"left"}},"Any"),t("td",{style:{"text-align":"left"}},"任意属性"),t("td",{style:{"text-align":"left"}}," ")])])],-1),r=l(`<p>下面的例子演示了组件的属性设置boolean值和数字的例子。注意<code>false</code>作为一个js变量，在组件的属性中使用时，属性前面需增加<code>:</code>冒号前缀，属性值仍使用引号包裹，但引号里不是字符串，而是js。</p><div class="language-html"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">template</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">view</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">		</span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">button</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">size</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">mini</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">:disabled</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">false</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">hover-start-time</span><span style="color:#89DDFF;">=</span><span style="color:#C3E88D;">20</span><span style="color:#89DDFF;"> &gt;</span><span style="color:#A6ACCD;">按钮</span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">button</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">view</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">template</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span></code></pre></div><h4 id="公共属性列表" tabindex="-1">公共属性列表 <a class="header-anchor" href="#公共属性列表" aria-label="Permalink to &quot;公共属性列表&quot;">​</a></h4><p>每个组件都有各自定义的属性，但所有uni-app的组件，都有如下属性：</p><table><thead><tr><th style="text-align:left;">属性名</th><th style="text-align:left;">类型</th><th style="text-align:left;">描述</th><th style="text-align:left;">注解</th></tr></thead><tbody><tr><td style="text-align:left;">id</td><td style="text-align:left;">String</td><td style="text-align:left;">组件的唯一标示</td><td style="text-align:left;">一般用于获取组件上下文对象（如：<a href="/leo-docs/api/media/video-context.html">VideoContext</a>），需要保持整个页面唯一</td></tr><tr><td style="text-align:left;">ref</td><td style="text-align:left;">String</td><td style="text-align:left;">vue中组件的唯一标示</td><td style="text-align:left;">用来给子组件注册引用信息，详见 <a href="/leo-docs/vue-components.html?id=ref">Vue 文档</a></td></tr><tr><td style="text-align:left;">class</td><td style="text-align:left;">String</td><td style="text-align:left;">组件的样式类</td><td style="text-align:left;">在对应的 css 中定义的样式类</td></tr><tr><td style="text-align:left;">style</td><td style="text-align:left;">String</td><td style="text-align:left;">组件的内联样式</td><td style="text-align:left;">可以动态设置的内联样式</td></tr><tr><td style="text-align:left;">hidden</td><td style="text-align:left;">Boolean</td><td style="text-align:left;">组件是否隐藏</td><td style="text-align:left;">所有组件默认是显示的</td></tr><tr><td style="text-align:left;">data-*</td><td style="text-align:left;">Any</td><td style="text-align:left;">自定义属性</td><td style="text-align:left;">组件上触发的事件时，会发送给事件处理函数</td></tr><tr><td style="text-align:left;">@*</td><td style="text-align:left;">EventHandler</td><td style="text-align:left;">组件的事件</td><td style="text-align:left;">详见各组件详细文档，事件绑定参考 <a href="/leo-docs/tutorial/vue-basics.html?id=事件处理器">事件处理器</a></td></tr></tbody></table><p>除了上述公共属性，还有一类特殊属性以<code>v-</code>开头，称之为vue指令，如v-if、v-else、v-for、v-model。详见<a href="/leo-docs/tutorial/vue-api.html?id=模板指令">vue指令</a></p><h4 id="在组件中使用js变量" tabindex="-1">在组件中使用js变量 <a class="header-anchor" href="#在组件中使用js变量" aria-label="Permalink to &quot;在组件中使用js变量&quot;">​</a></h4><p>组件中可以使用script的data中定义的js变量，但组件的属性中使用和内容区使用的用法不一样。</p><ul><li>在内容区使用时，使用两个花括号来包裹，如下面的<code>buttonText</code></li><li>在属性值中使用时，属性名的前面要加冒号前缀</li></ul><p>下面的button组件示例，等价于上一个的示例。只不过静态内容改成动态js。</p><div class="language-html"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">template</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">view</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">		</span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">button</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">size</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">mini</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">:disabled</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">buttondisble</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">hover-start-time</span><span style="color:#89DDFF;">=</span><span style="color:#C3E88D;">20</span><span style="color:#89DDFF;"> &gt;</span><span style="color:#A6ACCD;">{{buttonText}}</span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">button</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">view</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">template</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">default</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">		</span><span style="color:#F07178;">data</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">			</span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">				</span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">buttonText</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">按钮</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">				</span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">buttondisble</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#FF9CAC;">false</span></span>
<span class="line"><span style="color:#F07178;">			</span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">		</span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span></code></pre></div><h4 id="组件的事件" tabindex="-1">组件的事件 <a class="header-anchor" href="#组件的事件" aria-label="Permalink to &quot;组件的事件&quot;">​</a></h4><p>每个组件都有“事件”。事件就是在指定的条件下触发某个js方法。</p><p>比如button组件，有点击事件，也就是当手机用户点击这个button组件时，会触发这个事件。</p><p>事件也是组件的属性，只不过这类属性以<code>@</code>为前缀。</p><p>事件的属性值，指向一个在script的methods里定义过的js方法，还可以给方法传参数。</p><p>下面是组件事件的示例：</p><ul><li>click是button组件的点击事件，在用户点击这个button时触发</li><li>click指向了methods中定义的goto方法，并且传递了一个参数&#39;/pages/about/about&#39;</li></ul><div class="language-html"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">template</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">view</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">		</span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">button</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">size</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">mini</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">@click</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">goto(&#39;/pages/about/about&#39;)</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;">按钮</span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">button</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">view</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">template</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">default</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#F07178;">methods</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#F07178;">goto</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">url</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">                </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">按钮被点击了，且传入的参数是：</span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">+</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">url</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">            </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span></code></pre></div><h3 id="基础组件" tabindex="-1">基础组件 <a class="header-anchor" href="#基础组件" aria-label="Permalink to &quot;基础组件&quot;">​</a></h3><p>uni-app的组件，分为基础组件和扩展组件。</p><p>基础组件在uni-app框架中已经内置，无需将内置组件的文件导入项目，也无需注册内置组件，随时可以直接使用，比如<code>&lt;view&gt;</code>组件。</p><p>除了基础组件，都称为扩展组件。扩展组件需要将组件导入项目中才可以使用。</p><p>uni-app为开发者提供了一系列基础组件，类似HTML里的基础标签元素。</p><p>但uni-app的组件与HTML不同，而是与小程序相同，可更好的满足手机端的使用习惯。</p><p>虽然不推荐使用HTML标签，但实际上如果开发者写了<code>div</code>等标签，在编译到非H5平台时也会被编译器转换为<code>view</code>标签，类似的还有<code>span</code>转<code>text</code>、<code>a</code>转<code>navigator</code>等，包括css里的元素选择器也会转。但为了管理方便、策略统一，新写代码时仍然建议使用view等组件。</p><p>开发者可以通过组合这些基础组件进行快速开发。在需要复用的情况下可封装成扩展组件。</p><p><code>uni-app</code> 基础组件规范，与小程序规范相近。如果了解小程序开发的话，uni-app的基础组件会感觉很熟悉。但需要注意组件上的事件绑定，需要以 vue 的事件绑定语法来绑定，如 bindchange=&quot;eventName&quot; 事件，需要写成 <code>@change=&quot;eventName&quot;</code></p><div class="language-html"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">picker</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">mode</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">date</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">:value</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">date</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">start</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">2015-09-01</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">end</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">2020-09-01</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">@change</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">bindDateChange</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">		</span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">view</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">class</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">picker</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">		  当前选择: {{date}}</span></span>
<span class="line"><span style="color:#A6ACCD;">		</span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">view</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">picker</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span></code></pre></div><h4 id="基础组件列表" tabindex="-1">基础组件列表 <a class="header-anchor" href="#基础组件列表" aria-label="Permalink to &quot;基础组件列表&quot;">​</a></h4><p>基础组件分为以下十几大类：</p><p><strong>视图容器（View Container）：</strong></p><table><thead><tr><th style="text-align:left;">组件名</th><th style="text-align:left;">说明</th></tr></thead><tbody><tr><td style="text-align:left;"><a href="/leo-docs/component/view.html">view</a></td><td style="text-align:left;">视图容器，类似于HTML中的div</td></tr><tr><td style="text-align:left;"><a href="/leo-docs/component/scroll-view.html">scroll-view</a></td><td style="text-align:left;">可滚动视图容器</td></tr><tr><td style="text-align:left;"><a href="/leo-docs/component/swiper.html">swiper</a></td><td style="text-align:left;">滑块视图容器，比如用于轮播banner</td></tr><tr><td style="text-align:left;"><a href="/leo-docs/component/match-media.html">match-media</a></td><td style="text-align:left;">屏幕动态适配组件，比如窄屏上不显示某些内容</td></tr><tr><td style="text-align:left;"><a href="/leo-docs/component/movable-view.html?id=movable-area">movable-area</a></td><td style="text-align:left;">可拖动区域</td></tr><tr><td style="text-align:left;"><a href="/leo-docs/component/movable-view.html?id=movable-view">movable-view</a></td><td style="text-align:left;">可移动的视图容器，在页面中可以拖拽滑动或双指缩放。movable-view必须在movable-area组件中</td></tr><tr><td style="text-align:left;"><a href="/leo-docs/component/cover-view.html?id=cover-view">cover-view</a></td><td style="text-align:left;">可覆盖在原生组件的上的文本组件</td></tr><tr><td style="text-align:left;"><a href="/leo-docs/component/cover-view.html?id=cover-image">cover-image</a></td><td style="text-align:left;">可覆盖在原生组件的上的图片组件</td></tr></tbody></table><p><strong>基础内容（Basic Content）：</strong></p><table><thead><tr><th style="text-align:left;">组件名</th><th style="text-align:left;">说明</th></tr></thead><tbody><tr><td style="text-align:left;"><a href="/leo-docs/component/icon.html">icon</a></td><td style="text-align:left;">图标</td></tr><tr><td style="text-align:left;"><a href="/leo-docs/component/text.html">text</a></td><td style="text-align:left;">文字</td></tr><tr><td style="text-align:left;"><a href="/leo-docs/component/rich-text.html">rich-text</a></td><td style="text-align:left;">富文本显示组件</td></tr><tr><td style="text-align:left;"><a href="/leo-docs/component/progress.html">progress</a></td><td style="text-align:left;">进度条</td></tr></tbody></table><p><strong>表单组件（Form）：</strong></p><table><thead><tr><th style="text-align:left;">标签名</th><th style="text-align:left;">说明</th></tr></thead><tbody><tr><td style="text-align:left;"><a href="/leo-docs/component/button.html">button</a></td><td style="text-align:left;">按钮</td></tr><tr><td style="text-align:left;"><a href="/leo-docs/component/checkbox.html">checkbox</a></td><td style="text-align:left;">多项选择器</td></tr><tr><td style="text-align:left;"><a href="/leo-docs/component/editor.html">editor</a></td><td style="text-align:left;">富文本输入框</td></tr><tr><td style="text-align:left;"><a href="/leo-docs/component/form.html">form</a></td><td style="text-align:left;">表单</td></tr><tr><td style="text-align:left;"><a href="/leo-docs/component/input.html">input</a></td><td style="text-align:left;">输入框</td></tr><tr><td style="text-align:left;"><a href="/leo-docs/component/label.html">label</a></td><td style="text-align:left;">标签</td></tr><tr><td style="text-align:left;"><a href="/leo-docs/component/picker.html">picker</a></td><td style="text-align:left;">弹出式列表选择器</td></tr><tr><td style="text-align:left;"><a href="/leo-docs/component/picker-view.html">picker-view</a></td><td style="text-align:left;">窗体内嵌式列表选择器</td></tr><tr><td style="text-align:left;"><a href="/leo-docs/component/radio.html">radio</a></td><td style="text-align:left;">单项选择器</td></tr><tr><td style="text-align:left;"><a href="/leo-docs/component/slider.html">slider</a></td><td style="text-align:left;">滑动选择器</td></tr><tr><td style="text-align:left;"><a href="/leo-docs/component/switch.html">switch</a></td><td style="text-align:left;">开关选择器</td></tr><tr><td style="text-align:left;"><a href="/leo-docs/component/textarea.html">textarea</a></td><td style="text-align:left;">多行文本输入框</td></tr></tbody></table><p><strong>路由与页面跳转（Navigation）：</strong></p><table><thead><tr><th style="text-align:left;">组件名</th><th style="text-align:left;">说明</th></tr></thead><tbody><tr><td style="text-align:left;"><a href="/leo-docs/component/navigator.html">navigator</a></td><td style="text-align:left;">页面链接。类似于HTML中的a标签</td></tr></tbody></table><p><strong>媒体组件（Media）：</strong></p><table><thead><tr><th style="text-align:left;">组件名</th><th style="text-align:left;">说明</th></tr></thead><tbody><tr><td style="text-align:left;"><a href="/leo-docs/component/audio.html">audio</a></td><td style="text-align:left;">音频</td></tr><tr><td style="text-align:left;"><a href="/leo-docs/component/camera.html">camera</a></td><td style="text-align:left;">相机</td></tr><tr><td style="text-align:left;"><a href="/leo-docs/component/image.html">image</a></td><td style="text-align:left;">图片</td></tr><tr><td style="text-align:left;"><a href="/leo-docs/component/video.html">video</a></td><td style="text-align:left;">视频</td></tr><tr><td style="text-align:left;"><a href="/leo-docs/component/live-player.html">live-player</a></td><td style="text-align:left;">直播播放</td></tr><tr><td style="text-align:left;"><a href="/leo-docs/component/live-pusher.html">live-pusher</a></td><td style="text-align:left;">实时音视频录制，也称直播推流</td></tr></tbody></table><p><strong>地图（Map）：</strong></p><table><thead><tr><th style="text-align:left;">组件名</th><th style="text-align:left;">说明</th></tr></thead><tbody><tr><td style="text-align:left;"><a href="/leo-docs/component/map.html">map</a></td><td style="text-align:left;">地图</td></tr></tbody></table><p><strong>画布（Canvas）：</strong></p><table><thead><tr><th style="text-align:left;">组件名</th><th style="text-align:left;">说明</th></tr></thead><tbody><tr><td style="text-align:left;"><a href="/leo-docs/component/canvas.html">canvas</a></td><td style="text-align:left;">画布</td></tr></tbody></table><p><strong>webview（Web-view）：</strong></p><table><thead><tr><th style="text-align:left;">组件名</th><th style="text-align:left;">说明</th></tr></thead><tbody><tr><td style="text-align:left;"><a href="/leo-docs/component/web-view.html">web-view</a></td><td style="text-align:left;">web浏览器组件</td></tr></tbody></table><p><strong>广告</strong></p><table><thead><tr><th style="text-align:left;">组件名</th><th style="text-align:left;">说明</th></tr></thead><tbody><tr><td style="text-align:left;"><a href="/leo-docs/component/ad.html">ad</a></td><td style="text-align:left;">广告组件</td></tr><tr><td style="text-align:left;"><a href="/leo-docs/component/ad-draw.html">ad-draw</a></td><td style="text-align:left;">沉浸视频流广告组件</td></tr></tbody></table><p><strong>页面属性配置</strong></p><table><thead><tr><th style="text-align:left;">组件名</th><th style="text-align:left;">说明</th></tr></thead><tbody><tr><td style="text-align:left;"><a href="/leo-docs/component/custom-tab-bar.html">custom-tab-bar</a></td><td style="text-align:left;">底部tabbar自定义组件</td></tr><tr><td style="text-align:left;"><a href="/leo-docs/component/navigation-bar.html">navigation-bar</a></td><td style="text-align:left;">页面顶部导航</td></tr><tr><td style="text-align:left;"><a href="/leo-docs/component/page-meta.html">page-meta</a></td><td style="text-align:left;">页面属性配置节点</td></tr></tbody></table><p><strong>uniCloud</strong></p><table><thead><tr><th style="text-align:left;">组件名</th><th style="text-align:left;">说明</th></tr></thead><tbody><tr><td style="text-align:left;"><a href="/leo-docs/uniCloud/unicloud-db.html">unicloud-db组件</a></td><td style="text-align:left;">uniCloud数据库访问和操作组件</td></tr></tbody></table><p><strong>各平台专有组件</strong></p><p>在小程序平台和nvue平台，还有一些专有组件，比如open-data，详见左侧导航</p><h3 id="扩展组件的意义" tabindex="-1">扩展组件的意义 <a class="header-anchor" href="#扩展组件的意义" aria-label="Permalink to &quot;扩展组件的意义&quot;">​</a></h3><p>虽然所有的业务需求都可以通过基础组件满足，但仅有基础组件是低效的，实际开发中会有很多封装的组件。</p><p>比如我们需要一个五角星点击评分的组件，在DCloud的插件市场里可以获取到：<a href="https://ext.dcloud.net.cn/plugin?id=33" target="_blank" rel="noreferrer">https://ext.dcloud.net.cn/plugin?id=33</a></p><p>把这个uni-rate组件导入到你的uni-app项目下，在需要的vue页面里引用它，就可以在指定的地方显示出这个五角星组件。</p><div class="language-html"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#676E95;font-style:italic;">&lt;!-- 在index.vue页面引用 uni-rate 组件--&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">template</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">		</span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">view</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">			</span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">uni-rate</span><span style="color:#89DDFF;">&gt;&lt;/</span><span style="color:#F07178;">uni-rate</span><span style="color:#89DDFF;">&gt;</span><span style="color:#676E95;font-style:italic;">&lt;!-- 这里会显示一个五角星，并且点击后会自动亮星 --&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">		</span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">view</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">template</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span></code></pre></div><p>封装扩展组件的优势：</p><ul><li>可以将组件进行任意次数的复用。</li><li>合理的划分组件，有助于提高应用性能。</li><li>代码更加方便组织和管理，并且扩展性也更强，便于多人协同开发。</li><li>组件化开发能大幅度提高应用开发效率、测试性、复用性等。</li></ul><h3 id="组件的类别" tabindex="-1">组件的类别 <a class="header-anchor" href="#组件的类别" aria-label="Permalink to &quot;组件的类别&quot;">​</a></h3><p>uni-app支持的组件分为vue组件和小程序自定义组件。</p><p>如果你还不了解这两种组件，可以参阅各自的文档</p><ul><li>vue组件：<a href="https://uniapp.dcloud.net.cn/tutorial/vue-components?id=%e6%a6%82%e5%bf%b5" target="_blank" rel="noreferrer">文档</a></li><li>小程序自定义组件：其规范不是vue规范，而是小程序规范，<a href="https://uniapp.dcloud.net.cn/tutorial/miniprogram-subject.html#%E5%B0%8F%E7%A8%8B%E5%BA%8F%E8%87%AA%E5%AE%9A%E4%B9%89%E7%BB%84%E4%BB%B6%E6%94%AF%E6%8C%81" target="_blank" rel="noreferrer">文档</a></li></ul><p>日常开发来讲，推荐使用vue组件。uni-app支持小程序组件主要是为了兼容更多生态资源。</p><p>如果扩展组件符合uni-app的<code>easycom</code>组件规范，则可以免注册，直接使用。比如uni-ui扩展组件就符合<code>easycom</code>组件规范。</p><p>如果组件不符合easycom规范，则需要在代码里手动import和注册组件，然后才能使用。</p><p>除了easycom规范外，扩展组件还有很多概念，比如<code>uni_module</code>、<code>datacom</code>、<code>原生组件</code>、<code>uniCloud组件</code>。</p><p>接下来一一讲解。</p><h3 id="easycom组件规范" tabindex="-1">easycom组件规范 <a class="header-anchor" href="#easycom组件规范" aria-label="Permalink to &quot;easycom组件规范&quot;">​</a></h3><blockquote><p><code>HBuilderX 2.5.5</code>起支持</p></blockquote><p>传统vue组件，需要安装、引用、注册，三个步骤后才能使用组件。<code>easycom</code>将其精简为一步。</p><p>只要组件安装在项目的components目录下或<code>uni_modules</code>目录下，并符合<code>components/组件名称/组件名称.vue</code>目录结构。就可以不用引用、注册，直接在页面中使用。</p><p>比如前述举例的<a href="https://ext.dcloud.net.cn/plugin?id=33" target="_blank" rel="noreferrer">uni-rate组件</a>，它导入到uni-app项目后，存放在了目录/components/uni-rate/uni-rate.vue</p><p>同时它的组件名称也叫uni-rate，所以这样的组件，不用在script里注册和引用。 如下：</p><div class="language-html"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">template</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">		</span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">view</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">			</span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">uni-rate</span><span style="color:#89DDFF;">&gt;&lt;/</span><span style="color:#F07178;">uni-rate</span><span style="color:#89DDFF;">&gt;</span><span style="color:#676E95;font-style:italic;">&lt;!-- 这里会显示一个五角星，并且点击后会自动亮星 --&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">		</span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">view</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">template</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">	</span><span style="color:#676E95;font-style:italic;">// 这里不用import引入，也不需要在components内注册uni-list组件。template里就可以直接用</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">default</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">		</span><span style="color:#F07178;">data</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">			</span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">				</span></span>
<span class="line"><span style="color:#F07178;">			</span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">		</span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span></code></pre></div><p>不管components目录下安装了多少组件，<code>easycom</code>打包后会自动剔除没有使用的组件，对组件库的使用尤为友好。</p><p>组件库批量安装，随意使用，自动按需打包。以官方的<code>uni-ui</code>为例，在HBuilderX新建项目界面选择<code>uni-ui</code>项目模板，只需在页面中敲u，拉出大量组件代码块，直接选择，即可使用。大幅提升开发效率，降低使用门槛。</p><p>在<a href="https://ext.dcloud.net.cn/" target="_blank" rel="noreferrer">DCloud插件市场</a>下载符合<code>components/组件名称/组件名称.vue</code>目录结构的组件，均可直接使用。</p><p><code>easycom</code>是自动开启的，不需要手动开启。</p><p>如果你的组件名称或路径不符合easycom的默认规范，可以在<code>pages.json</code>的<code>easycom</code>节点进行个性化设置，自定义匹配组件的策略。<a href="/leo-docs/collocation/pages.html?id=easycom">另见</a></p><p>如果不使用easycom，手动引用和注册vue组件，则需要分3步写如下代码：</p><ol><li>import导入组件</li><li>components里注册组件</li><li>template中使用组件</li></ol><div class="language-html"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">template</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">		</span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">view</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">			</span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">uni-rate</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">text</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">1</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;&lt;/</span><span style="color:#F07178;">uni-rate</span><span style="color:#89DDFF;">&gt;</span><span style="color:#676E95;font-style:italic;">&lt;!-- 3.使用组件 --&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">		</span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">view</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">template</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">	&lt;</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">		</span><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> uniRate </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">@/components/uni-rate/uni-rate.vue</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">;</span><span style="color:#676E95;font-style:italic;">//1.导入组件</span></span>
<span class="line"><span style="color:#A6ACCD;">		</span><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">default</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">			</span><span style="color:#F07178;">components</span><span style="color:#89DDFF;">:{</span><span style="color:#A6ACCD;">uniRate </span><span style="color:#89DDFF;">}</span><span style="color:#676E95;font-style:italic;">//2.注册组件</span></span>
<span class="line"><span style="color:#A6ACCD;">		</span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">	</span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span></code></pre></div><h3 id="uni-module规范" tabindex="-1">uni_module规范 <a class="header-anchor" href="#uni-module规范" aria-label="Permalink to &quot;uni_module规范&quot;">​</a></h3><p>uni_module其实不止服务于组件，它可以服务于组件、js库、页面、项目等所有DCloud插件市场所支持的种类。</p><p>符合uni_module规范的组件都在项目的<code>uni_modules</code>目录下，以插件id为目录存放。（项目模板不放在<code>uni_modules</code>目录下）</p><p>在HBuilderX中点右键可方便的更新插件，插件作者也可以方便的上传插件。</p><p>uni_module还支持云端一体的插件。</p><p>uni_module有详细的专项文档，请另行查阅<a href="/leo-docs/plugin/uni_modules.html">uni_module规范</a>。</p><h3 id="unicloud组件" tabindex="-1">uniCloud组件 <a class="header-anchor" href="#unicloud组件" aria-label="Permalink to &quot;uniCloud组件&quot;">​</a></h3><p>uniCloud是DCloud提供的、配套uni-app的云开发服务。</p><p>uni-app的基础组件中，有一个特殊基础组件是：<code>&lt;unicloud-db&gt;</code>组件。</p><p>它可以在前端直接获取和操作uniCloud的云端数据库。</p><p>相关文档详见：<a href="/leo-docs/uniCloud/unicloud-db.html">unicloud-db组件</a></p><p>除了内置的数据库组件，在uni-ui扩展库里还有uniCloud的文件选择和上传组件，参考：<a href="https://ext.dcloud.net.cn/plugin?id=4079" target="_blank" rel="noreferrer">uni-file-picker</a></p><h3 id="原生组件和原生插件" tabindex="-1">原生组件和原生插件 <a class="header-anchor" href="#原生组件和原生插件" aria-label="Permalink to &quot;原生组件和原生插件&quot;">​</a></h3><h4 id="基础组件里的原生组件" tabindex="-1">基础组件里的原生组件 <a class="header-anchor" href="#基础组件里的原生组件" aria-label="Permalink to &quot;基础组件里的原生组件&quot;">​</a></h4><p>uni-app的基础组件里，有一批原生组件，如video、map...</p><p>这些组件如果用于vue页面，也就是webview渲染时，会造成层级高于普通前端组件的情况。</p><p>它们的层级需要使用cover-view等特殊组件才能覆盖，同时在使用中有些需要注意的事情。</p><p>在app-nvue里没有这些问题。</p><p>相关文档详见：<a href="/leo-docs/component/native-component.html">uni-app内置原生组件说明</a></p><h4 id="uni-app的app端原生插件" tabindex="-1">uni-app的App端原生插件 <a class="header-anchor" href="#uni-app的app端原生插件" aria-label="Permalink to &quot;uni-app的App端原生插件&quot;">​</a></h4><p>uni-app的App端支持原生插件，这类插件使用iOS或Android原生语言编写，封装成插件，供其他开发者使用js来调用。</p><p>原生插件分为原生组件component和原生模块module。</p><p>其实原生组件component只能在App-nvue环境中使用。</p><p>相关文档详见：<a href="https://nativesupport.dcloud.net.cn/NativePlugin/README" target="_blank" rel="noreferrer">uni-app原生插件开发</a></p><h3 id="datacom" tabindex="-1">datacom <a class="header-anchor" href="#datacom" aria-label="Permalink to &quot;datacom&quot;">​</a></h3><p>datacom组件是一种数据驱动的、可云端一体的组件。</p><p>传统组件只涉及前端概念，而datacom拉通了uniCloud云端数据，是uni-app+uniCloud协同开发的必备提效工具。</p><p>相关文档详见：<a href="/leo-docs/component/datacom.html">datacom组件</a></p><h3 id="如何封装组件" tabindex="-1">如何封装组件 <a class="header-anchor" href="#如何封装组件" aria-label="Permalink to &quot;如何封装组件&quot;">​</a></h3><p>封装组件涉及的知识点较多，相关文档详见：<a href="https://uniapp.dcloud.io/vue-components" target="_blank" rel="noreferrer">vue组件详解</a></p><h3 id="扩展组件-uni-ui-uniui" tabindex="-1">扩展组件（uni-ui）@uniui <a class="header-anchor" href="#扩展组件-uni-ui-uniui" aria-label="Permalink to &quot;扩展组件（uni-ui）@uniui&quot;">​</a></h3><p>详见: <a href="/leo-docs/component/uniui/uni-ui.html">uni-ui介绍</a></p><p><strong>更多组件</strong></p><p>除了基础组件、uni-ui，插件市场还有更多扩展组件、模板，包括前端组件和原生扩展组件，具体见<a href="https://ext.dcloud.net.cn/" target="_blank" rel="noreferrer">插件市场</a>。</p><p>关于其他vue的web组件库、小程序组件库是否能在uni-app中使用的问题，参考<a href="https://ask.dcloud.net.cn/article/35489" target="_blank" rel="noreferrer">https://ask.dcloud.net.cn/article/35489</a></p>`,121),i=[p,c,r];function d(y,D,F,u,h,g){return n(),e("div",null,i)}const C=a(o,[["render",d]]);export{m as __pageData,C as default};
